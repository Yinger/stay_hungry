## 代码块中的events，http，server，location，upstream等都是块配置项 ##
## 块配置项可以嵌套。内层块直接继承外层块，例如：server块里等任意配置都是基于http块里等已有配置 ##

## Nginx worker 进程运行等用户及用户组
# 语法：user username[groupname] 默认：user nobody nobody
# user 用于设置master进程启动后，fork出的worker进程运行在那个用户和用户组下。当按照“user username”设置时，用户组名与用户名相同。
# 若用户在configure命令执行时，使用了参数 --user=usergroup 和 --group=groupname,此时nginx.conf将使用参数中指定当用户和用户组。

#user       www www;  ## Default: nobody

## Nginx workder 进程个数：其数量直接影响性能。
# 每个worker进程都是单线程单进程，他们会调用各个模块以实现多种多样的功能。如果这些模块不会出现阻塞式的调用，那么，有多少CPU内核就应该配置多少个进程，反之，有可能出现阻塞式调用，那么，需要配置稍多一些的worker进程。
worker_processes  2;  ## Default: 1

## ssl硬件加速。
# 用户可以用OpenSSL提供的命令来查看是否有ssl硬件加速设备：openssl engine -t
#ssl_engine device;

## 守护进程（daemon）。是脱离终端在后台允许的进程。它脱离终端是为了避免进程执行过程中的信息在任何终端上显示。这样一来，进程也不会被任何终端所产生的信息所打断。##
## 关闭守护进程的模式，之所以提供这种模式，是为了方便跟踪调试nginx，毕竟用gbd调试进程时最繁琐的就是如何继续跟进fork出的子进程了。##
## 如果用off关闭来master_process方式，就不会fork出worker子进程来处理请求，而是用master进程自身来处理请求
#daemon off; ##查看是否以守护进程的方式运行Nginx 默认是on
#master_process off; ## 是否以master/worker方式工作 默认是on

## error日志的设置 ##
# 语法:error_log /path/file level;
# 默认:error_log /log/error.log error;
# 当path/file 的值为 /dev/null 时，就不会输出任何日志来，这也是关闭error日志的唯一手段.
# level的取值范围是 debug,info,notice,warn,error,crit,alert,emerg 从左至右级别一次增大。
# 当level的级别为error时，error，crit，alert，emerg级别的日志都会输出，大于等于该级别会输出，小于该级别的不会输出。
# 如果设定的日志级别时debug，则会输出所有的日志，这一数据量会很大，需要预先确保/path/file所在的磁盘有足够的磁盘空间。级别设定到debug，必须在configure时加入 --with-debug配置项。
#error_log  logs/error.log;

## pid文件（master进程ID的pid文件存放路径）的路径
#pid        logs/nginx.pid;

#worker_rlimit_nofile 8192;

events {
# 仅对指定的客户端输出debug级别的日志：语法：debug_connection[IP|CIDR]
# 这个设置项实际上属于事件类配置，因此必须放在events{...}中才会生效。它的值可以时IP地址或者CIRD地址。
  #debug_connection 10.224.66.14; # 或是 debug_connection 10.224.57.0/24
# 这样，仅仅以上IP地址的请求才会输出debug级别的日志，其他请求仍然沿用error_log中的配置的日志级别。
# 注意：在使用debug_connection前，需要确保在执行configure时已经加入了 --with-debug参数，否则不会生效。

  worker_connections  4096;  ## Default: 1024
}

## 核心转储（coredump）：在Linux系统中，当进程发生错误或收到信号而终止时，系统会将进程执行时的内存内容（核心映像）写入一个文件（core文件），以作为调试使用，这就是所谓的核心转储（coredump）。

http {
## 嵌入其他配置文件 语法：include /path/file
# 参数既可以是绝对路径也可以时相对路径（相对于Nginx的配置目录，即ngnix.conf所在的目录）
  include    conf/mime.types;
#   include    /etc/nginx/proxy.conf;
#   include    /etc/nginx/fastcgi.conf;
#   index    index.html index.htm index.php;

  default_type application/octet-stream;
#   log_format   main '$remote_addr - $remote_user [$time_local]  $status '
#     '"$request" $body_bytes_sent "$http_referer" '
#     '"$http_user_agent" "$http_x_forwarded_for"';
#   access_log   logs/access.log  main;
  sendfile     on;
#   tcp_nopush   on;
  keepalive_timeout 65;
#   server_names_hash_bucket_size 128; # this seems to be required for some vhosts
  upstream AspNetCore31 {
      server 8.111.88.88:9001 weight=2;
      server 8.111.88.88:9002 weight=1;
      server 8.111.88.88:9003 weight=1;
  }

  server {
      ## listen监听的端口
      # 语法：listen address:port [default(deprecated in 0.8.21) | default_server | [backlog=num | rcvbuf=size | sndbuf=size | accept_filter=filter | deferred | bind | ssl]]
      # default_server:如果没有设置这个参数，那么将会以在 nginx.conf 中找到的第一个server块作为默认server块
      listen 80;

      # 主机名称：其后可以跟多个主机名称，开始处理一个HTTP请求时，nginx会取出header头中的Host，与每个server中的server_name进行匹配，以此决定到底由哪一个server来处理这个请求。有可能一个Host与多个server块中的server_name都匹配，这时会根据匹配优先级来选择实际处理的server块。
      server_name localhost;

      # charset koi8-r;

      # access_log logs/host.access.log main;

    #   location / {
    #       root html;
    #       index index.html index.htm;
    #   }

    ## location 语法： location[=|~|~*|^~]/uri/{...}
    # 注意：location是有顺序的，当一个请求有可能匹配多个location时，实际上这个请求会被第一个location处理
    location / {
        proxy_pass http://AspNetCore31;
    }

    # error_page 404 /404.html;
    # redirect server error pages to the static page /50x.html
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root html;
    }
  }

#   server { # php/fastcgi
#     listen       80;
#     server_name  domain1.com www.domain1.com;
#     access_log   logs/domain1.access.log  main;
#     root         html;

#     location ~ \.php$ {
#       fastcgi_pass   127.0.0.1:1025;
#     }
#   }

#   server { # simple reverse-proxy
#     listen       80;
#     server_name  domain2.com www.domain2.com;
#     access_log   logs/domain2.access.log  main;

#     # serve static files
#     location ~ ^/(images|javascript|js|css|flash|media|static)/  {
#       root    /var/www/virtual/big.server.com/htdocs;
#       expires 30d;
#     }

#     # pass requests for dynamic content to rails/turbogears/zope, et al
#     location / {
#       proxy_pass      http://127.0.0.1:8080;
#     }
#   }

#   upstream big_server_com {
#     server 127.0.0.3:8000 weight=5;
#     server 127.0.0.3:8001 weight=5;
#     server 192.168.0.1:8000;
#     server 192.168.0.1:8001;
#   }

#   server { # simple load balancing
#     listen          80;
#     server_name     big.server.com;
#     access_log      logs/big.server.access.log main;

#     location / {
#       proxy_pass      http://big_server_com;
#     }
#   }
}